Spawn(Init){
  * (Init): Cell(F,V) ? Egg(F) :(Turn0)
  * (Turn0): True ? Turn(R) :(Init)
}


Player0(Init){
  * (Init):
  | Key(FU) ? Move(N) :(Init)
  | Key(FD) ? Move(S) :(Init)
  | Key(FL) ? Move(O) :(Init)
  | Key(FR) ? Move(E) :(Init)
  | Key(SPACE) ? Hit  :(Init)
  | Key(ENTER) ? Jump :(Init)
  | Key(b)  ? Jump(B) :(Init)
  | Key(d)  ? Move(D) :(Init)
  | Key(e)  ? Move(E) :(Init)
  | Key(f)  ? Turn(B) :(Init)
  | Key(p)  ? Pop     :(Init)
  | Key(w)  ? Wizz    :(Init)
  | Key(g)  ? Get     :(Init)
  | Key(t)  ? Throw   :(Init)
  | True    ? Power   :(Init)
}

Philosopher0(Think){
  * (Think)
}

Blocker0(Init){
  * (Init): !True ? Power :(Init)
}

Mover0(Init){
  * (Init): True ? Move :(Init)
}

Popper0(Init){
  * (Init): True ? Pop :(Init)
}

Wizzer0(Init){
  * (Init): True ? Wizz :(Init)
}

Turner0(Turn_0){
  * (Turn_0): True ? Turn(R) :(Turn_1)
  * (Turn_1): True ? Turn(R) :(Turn_2)
  * (Turn_2): True ? Turn(R) :(Turn_3)
  * (Turn_3): True ? Turn(R) :(Turn_4)
  * (Turn_4): True ? Kamikaze :()
  * ()
}

Master0(Think_0){
 * (Think_0): True ? Power :(Think_1)
 * (Think_1): True ? Power :(Think_2)
 * (Think_2): True ? Power :(Think_3)
 * (Think_3): True ? Power :(Think_4)
 * (Think_4): True ? Power :(Happy_0)

 * (Happy_0): True ? Power :(Happy_1)
 * (Happy_1): True ? Power :(Happy_2)
 * (Happy_2): True ? Power :(Happy_3)
 * (Happy_3): True ? Power :(Happy_4)
 * (Happy_4): True ? Power :(Happy_5)

 * (Happy_5): True ? Kamikaze   :(X)
 * (X)
}


Explorer0(Explore_R){

* (Explore_R):
  | Cell(F,V) ? Move    :(Explore_R)
  | Cell(R,V) ? Turn(R) :(Explore_R)
  | Cell(L,V) ? Turn(L) :(Explore_R)
  | True ? Turn(B) :(Explore_L)

* (Explore_L):
    | Cell(F,V) ? Move    :(Explore_L)
    | Cell(L,V) ? Turn(L) :(Explore_L)
    | Cell(R,V) ? Turn(R) :(Explore_L)
    | True ? Turn(B) :(Explore_R)
}


SuperHero0(Explore){

* (Explore):
  | Cell(F,P) ? Pick    :(Happy)
  | Cell(F,V) ? Move(F) :(Run)
  | Cell(F,J) ? Jump    :(Explore)
  | True ? Turn(L)      :(Explore)

* (Run):
  | Cell(F,V) ? Move(F) :(Explore)
  | Cell(F,A) / Cell(B,A) / Cell(L,A) / Cell(R,A) ? Wizz :(Escape)
  | True ? Pop :(Explore)

* (Escape):
  | Cell(F,A) & Cell(B,V) ? Move(B) :(Escape)
  | Cell(B,A) & Cell(F,V) ? Move(F) :(Escape)
  | Cell(R,A) & Cell(L,V) ? Move(L) :(Escape)
  | Cell(L,A) & Cell(R,V) ? Move(R) :(Escape)
  | Cell(F,A) & !(Cell(B,V)) ? Hit  :(Fight)
  | True ? Power :(Explore)

* (Fight):
  | Cell(F,A) & Cell(L,A) & !(Cell(R,V) / Cell(B,V)) ? Hit     :(Angry)
  | Cell(F,A) & Cell(R,A) & !(Cell(L,V) / Cell(B,V)) ? Hit     :(Angry)
  | Cell(F,A) & Cell(B,A) & !(Cell(L,V) / Cell(R,V)) ? Hit     :(Angry)
  | Cell(L,A) & Cell(R,A) & !(Cell(F,V) / Cell(B,V)) ? Turn(R) :(Angry)
  | True ? Pop :(Escape)

* (Angry):
  | GotPower ? Hit      :(Angry_11)
  | !GotPower ? Protect :(Angry_11)

* (Angry_11): True ? Turn(B) :(Angry_12)

* (Angry_12):
  | GotPower ? Hit      :(Angry_13)
  | !GotPower ? Protect :(Angry_13)

* (Angry_13): True ? Turn(R) :(Angry_14)

* (Angry_14):
  | GotPower ? Hit      :(Angry_15)
  | !GotPower ? Protect :(Angry_15)

* (Angry_15): True ? Turn(B) :(Angry_16)

* (Angry_16):
  | GotPower ? Hit      :(Angry_17)
  | !GotPower ? Protect :(Angry_17)

* (Angry_17): True ? Turn(R) :(Rest)

* (Rest):
  | Cell(F,V) & Cell(B,V) & Cell(L,V) & Cell(R,V) ? Power : (Rest)
  | True ? Power :(Run)

* (Happy):
| Cell(F,P) ? Pick    :(Happy)
| Cell(B,P) ? Turn(B) :(Happy)
| Cell(L,P) ? Turn(L) :(Happy)
| Cell(R,P) ? Turn(R) :(Happy)
| True ? Turn(L)      :(Explore)

*(Happy): True ? Store :(Crazy)

* (Crazy)  : True ? Get     :(Crazy_1)
* (Crazy_1): True ? Get     :(Crazy_2)
* (Crazy_2): True ? Turn(B) :(Crazy_3)
* (Crazy_3): True ? Throw   :(Think)

* (Think):
  | Cell(F,J) ? Jump    :(Build)
  | Cell(B,J) ? Turn(B) :(Think)
  | Cell(L,J) ? Turn(L) :(Think)
  | Cell(R,J) ? Turn(R) :(Think)

* (Build):
  | GotStuff ? Get :(Build_1)
  | True ? Wizz    :(Explore)

* (Build_1): True ? Throw :(Build)
}


TEST_Parsing_Condition(Init){
  * (Init): (((((((True))))))) ? Power :(Init)
  * (Init): !((!((!((!(!True))))))) ? Power :(Init)
  * (Init): !( Key(a) / Key(b) / Key(c) / Key(d) ) ? Power :(Init)
  * (Init): Key(a) & Key(b) & Key(c) & Key(d) ? Power :(Init)
  * (Init): ( Key(a) & Key(b) & Key(c) & Key(d) ) ? Power :(Init)
  * (Init): Key(a) / Key(b) / Key(c) / Key(d) ? Power :(Init)
  * (Init): ( Key(a) / Key(b) / Key(c) / Key(d) ) ? Power :(Init)
  * (Init): !( Key(a) / Key(b) / Key(c) / Key(d) ) ? Power :(Init)
  * (Init): !Key(a) & !Key(b) & !Key(c) & !Key(d)  ? Power :(Init)
  * (Init): !(Key(a) & !Key(b)) / (!Key(c) & !Key(d))  ? Power :(Init)
}


TEST_parsing_variable(Init){
  * (Init): True ? Kamikaze :(Init)
  * (Unreachable): MyDir(d) ? Move(d) :(Unreachable)
  * (Useless): MyDir(_) ? Move :(Useless)
  * (Dummy): Cell(F,e) ? Hit(e,F) :(Dummy)
}
